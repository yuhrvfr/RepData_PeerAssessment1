m = x
print(y)
print(m)
rm(name)
name <- list(m,y)
name[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve(n)
n
rm(n)
cacheSolve(n)
name
names
rm(name)
name
cacheSolve(n)
n <- matrix(1:4,2,2)
cacheSolve(n)
n
name
class(n)
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
rm(name)
name <- list(m,y)
name[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve(n)
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(name,"is a matrix of dimension",$dim)
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
rm(name)
name <- list(m,y)
name[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",$dim))
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
rm(name)
name <- list(m,y)
name[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",$dim))
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
rm(x)
x <- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",$dim))
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
c(name,"is a matrix of dimension",$dim)
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",x$dim))
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
rm(n)
cacheSolve(n)
n <- matrix(1:4,2,2)
cacheSolve(n)
n
n$dim
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",dim(name)))
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve(n)
n
x
class(cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",dim(name)))
y <- NULL
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <<- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
}
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",dim(name)))
y <- NULL
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <<- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cacheSolve(n)
n
x
z(4:7,2,2)
z <- matrix(4:7,2,2)
z
cacheSolve(z)
x
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",dim(name)))
y <- NULL
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x <- list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
cachSolve(z)
cacheSolve(z)
z
z
x
cacheSolve <- function(x,...) {
name <- deparse(substitute(x))
name
if (!exists(name)) {
print(c("not exists" ,name))
} else {
print(c(name , "found"))
if (class(x) == "matrix") {
if (nrow(x) != ncol(x)) {
print(c(name,"Matrix must be squared"))
return
} else {
print(c(name,"is a matrix of dimension",dim(name)))
y <- NULL
y <- solve(x)
m <- NULL
m = x
#print(y)
#print(m)
x = list(m,y)
x[[2]]
}
} else  if (class(x) == "list" ){
x[[2]]
} else {
print(c( name, "must be a matrix"))
}
}
}
rm(x)
cacheSolve(z)
z
x
l <- list()
length(l)
l[1] <- n
n
l[1] <- n
class(l)
list
args(list)
dim(z)
dim
dim("z")
q()
dir ()
dir ()
rankall <- function(outcome, num= "best") {
source('C:/DataS/R/work/week4/rankall.R')
}
rankall("heart attack")
fr
l_data_frame
re
dir ()
ls ()
yy
load("C:/DataS/R/work/week4/rankall.R")
dir ()
cd
cd c:\
cd "c:\"
)
q()
exit
}
exit
}
{}
find.package("devtools")
install.packages("RMySQL",type="source")
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL",type="source")
library(RMySQL)
install.packages('RMySQL',type="source")
library(RMySQL)
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
Sys.getenv("MYSQL_HOME")
q()
head(mtcars)
library(resharpe2)
library(resharp2)
library(reshape2)
htcars <- mtcars
htcars
head(htcars)
str(htcars)
head(htcars)
htcars$carname <- rownames(htcars)
head(htcars)
head(htcars)
carMelt <- melt(htcars,id=c("carname","gear","cyl"), measure.vars=c
("mpg","hp"))
carMelt
carMelt
nrows(htcars)
nrow(htcars)
nrow(carMelt)
carMelt(order("carname"))
carMelt[order(carMelt$carname),]
library(plyr)
arrage(carMelt,carname)
arrange(carMelt,carname)
cylData <- dcast(carMelt,cyl~variable)
cylData <- dcast(carMelt,cyl~variable)
cylData
cylData <- dcast(carMelt,cyl~variable,mean)
cylData
InsectSprys
InsectSprays
cylData <- dcast(carMelt,cyl~variable,count)
cylData
carMelt["cyl"==4,]
carMelt[("cyl"==4),]
carMelt
carMelt[(carMelt$cyl==4),]
carMelt["carMelt$cyl"==4,]
carMelt[cyl==4,]
carMelt[carMelt[,3]==4,]
carMelt[carMelt[,3]==4 & carMelt$variable=="hp",]
head(InsectSparys)
head(InsectSprays)
cylData <- dcast(carMelt,cyl~variable,sum)
cylData
carMelt[carMelt$cyl==4,]
carMelt[carMelt$cyl==6,]
cylData
InsectSprays
str(InsectSprays)
his <- InsectSprays
his
hisSum <- ddply(his,.(spray), summarize, sum=ave(count,FUN=sum))
his
hisSum
his
hisSum
tapply(his$count, his$spray, sum)
hisSum1 <- ddply(his,.(spray), summarize, sum=sum(count))
hisSum1
q()
setwd("C:/ReprodResearch/RepData_PeerAssessment1")
dir()
knit2html("PA_template.Rmd","test2.html")
library(knitr)
knit2html("PA_template.Rmd","test2.html")
dir()
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","test2.html")
knit2html("PA1_template.Rmd","PA1_template.html")
knit2html("PA1_template.Rmd","PA1_template.html")
setwd("C:/ReprodResearch/RepData_PeerAssessment1")
